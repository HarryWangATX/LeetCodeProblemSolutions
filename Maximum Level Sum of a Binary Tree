/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer, Integer> sums = new HashMap<>();
    public int maxLevelSum(TreeNode root) {
        helper(root, 1);
        int max = Integer.MIN_VALUE;
        int level = 0;
        Iterator hmIterator = sums.entrySet().iterator(); 
        while (hmIterator.hasNext()) { 
            Map.Entry mapElement = (Map.Entry)hmIterator.next(); 
            if((int)mapElement.getValue() > max){
                max = (int)mapElement.getValue();
                level = (int)mapElement.getKey();
            } 
        } 
        return level;
    }
    public void helper(TreeNode root, int depth){
        if(root == null){
            return ;
        }
        sums.put(depth, sums.getOrDefault(depth, 0)+root.val);
        helper(root.left, depth+1);
        helper(root.right, depth+1);
    }
}
