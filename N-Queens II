class Solution {
    int count = 0;
    public int totalNQueens(int n) {
        dfs(new int[n][n], 0, new HashSet<>(), new HashSet<>(), new HashSet<>());
        return count;
    }
    public void dfs(int[][] board, int i, Set<Integer> diagonal, Set<Integer> diagonal2, Set<Integer> vertical){
        if(i == board.length){
            count++;
            return ;
        }
        for(int j = 0; j<board.length; j++){
            if(!diagonal.contains(i+j) && !diagonal2.contains(j-i) && !vertical.contains(j)){
                board[i][j] = 1;
                diagonal.add(i+j);
                diagonal2.add(j-i);
                vertical.add(j);
                dfs(board, i+1, diagonal, diagonal2, vertical);
                board[i][j] = 0;
                diagonal.remove(i+j);
                diagonal2.remove(j-i);
                vertical.remove(j);
            }
            
        }
    }
}
