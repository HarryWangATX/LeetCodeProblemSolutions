class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0){
            return -1;
        }
        int pivot = getPivot(nums, 0, nums.length-1);
        int ans = 0;
        if(pivot == -1){
            return binarySearch(nums, 0, nums.length-1, target);
        }
        else{
            ans = binarySearch(nums, 0, pivot, target);
            if(ans == -1)
            {
                ans = binarySearch(nums, pivot+1, nums.length-1, target);
                return ans;
            }
            else{
                return ans;
            }
        }
    }
    public int getPivot(int[] nums, int left, int right){
        int pivot = -1;
        while(left <= right){
            pivot = left + (right - left)/2;
            if(pivot == 0){
                break;
            } 
            if(pivot == nums.length - 1) {
                pivot -= 1;
                break;
            }
            if(nums[pivot-1] < nums[pivot] && nums[pivot] > nums[pivot+1] ){
                break;
            } 
            if(nums[pivot-1] > nums[pivot] && nums[pivot] < nums[pivot+1]){
                pivot -= 1; 
                break;
            }
            if(nums[pivot] > nums[left]){
               left = pivot+1; 
            } 
            else{
                right = pivot-1;
            }             
        }
        if(left > right){
           return -1; 
        } 
        return pivot;
    }
    
    public int binarySearch(int[] nums, int left, int right, int target){
        int mid = 0; 
        while(left<=right){
            mid = left + (right-left)/2;
            if(nums[mid] > target){
                right = mid-1;
            }
            else if(nums[mid] < target){
                left = mid+1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }
}
