/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        int max = 0;
        List<TreeNode> list = new LinkedList<>();
        list.add(root);
        while(!list.isEmpty()){
            int n = list.size();
            
            max = Math.max(n, max);
            
            for(int i=0; i<n; i++){
                TreeNode temp = list.remove(0);
                
                if(temp != null){
                    list.add(temp.left);
                    list.add(temp.right);
                }
                else{
                    list.add(null);
                    list.add(null);
                }
            }

            while(!list.isEmpty() && list.get(0) == null){
                list.remove(0);
            }
            
            while(!list.isEmpty() && list.get(list.size()-1) == null){
                list.remove(list.size()-1);
            }
        }
        return max;
    }
}
