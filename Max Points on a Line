class Solution {
    public int maxPoints(int[][] points) {
        int len = points.length;
        if(len <= 2){
            return len;
        }
                
        int res = 0;
        
        for(int i = 0; i < len-1; i++){
            Map<Pair, Integer> map = new HashMap<>();
            int tempres = 1;
            int same = 0;
            for(int j = i + 1; j < len; j++){
                
                double d1 = 0;
                double d2 = 0;
                
                if(points[i][1] == points[j][1]){
                    if(points[i][0] == points[j][0]){   
                        same++;
                        continue;
                    }
                    else{                                        
                        d1 = 0;
                        d2 = points[i][1];
                   }                    
                }
                else if(points[i][0] == points[j][0]){          
                    d1 = Double.POSITIVE_INFINITY;
                    d2 = points[i][0];
                }
                else{                                                         
                    d1 = 1000000 * (double)(points[i][1] - points[j][1])/(points[i][0] - points[j][0]);        
                    d2  =  (double)(points[i][1] - d1*points[i][0]);
                }
                                                    
                Pair<Double, Double> pair = new Pair<>(d1,d2);
                if(map.containsKey(pair)){             
                    int num = map.get(pair) + 1;
                    map.put(pair, num);
                }else{                                  
                    map.put(pair, 2);                    
                }
                tempres = Math.max(tempres, map.get(pair));            
            } 
            res = Math.max(res, tempres+same);
        }
        
        return res;
    }
}
