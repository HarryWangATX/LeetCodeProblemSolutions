class Solution {
    int perimeter = 0;
    public int islandPerimeter(int[][] grid) {
        int[][] big = new int[grid.length+2][grid[0].length+2];
        for(int i = 0; i<grid.length; i++){
            for(int j = 0; j<grid[0].length; j++){
                big[i+1][j+1] = grid[i][j];
            }
        }
        
        // for(int[] row : big){
        //     for(int col : row){
        //         System.out.print("\t" + col);
        //     }
        //     System.out.println();
        // }
        
        findPeri(0, 0, big);
        return perimeter;
    }
    public void findPeri(int i, int j, int[][] grid){
        int num = adjCells(i, j, grid);
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length){
            return ;
        }
        if(grid[i][j] == 2 || grid[i][j] == 1){
            return ;
        }
        //System.out.println(i + " " + j + " " + num);
        perimeter+=num;
        grid[i][j] = 2;
        findPeri(i, j-1, grid);
        findPeri(i, j+1, grid);
        findPeri(i+1, j, grid);
        findPeri(i-1, j, grid);
    }
    public int adjCells(int i, int j, int[][] grid){
        int count = 0;
        int[] dx = {0, 0, 1, -1};
        int[] dy = {-1, 1, 0, 0};
        for(int k = 0; k<4; k++){
            int nI = i + dx[k];
            int nJ = j + dy[k];
            if(nI < 0 || nJ < 0 || nI >= grid.length || nJ >= grid[0].length) continue;
            if(grid[nI][nJ] == 1) count++;
        }
        return count;
    }
}
