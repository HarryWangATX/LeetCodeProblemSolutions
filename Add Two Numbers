/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
import java.math.*;

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        String n1 = "";
        String n2 = "";
        String reversedResult = "";
        
        while(l1 != null){
            n1 += "" + l1.val;
            l1 = l1.next;
        }
        while(l2 != null){
            n2 += "" + l2.val;
            l2 = l2.next;
        }
        
        BigInteger sum = new BigInteger(reverse(n1));
        sum = sum.add(new BigInteger(reverse(n2)));
        
        reversedResult = reverse(sum + "");
        ListNode a = null;
        return stringToNode(reversedResult, a);
        
        
        
    }
    
    public static String reverse(String str){
        String reverse = "";
        
        
        for(int i = str.length() - 1; i >= 0; i--)
        {
            reverse = reverse + str.charAt(i);
        }
        
        return reverse;
    }
    
    
    public static ListNode add(int data) 
    { 
        ListNode newnode = new ListNode(data); 
        newnode.val = data;
        newnode.next = null; 
        return newnode; 
    } 

    // Function to convert the string 
    // to Linked List. 
    public static ListNode stringToNode(String text,  ListNode head) 
    { 
        head = add(text.charAt(0)-'0'); 
        ListNode curr = head; 

        // curr pointer points to the current node 
        // where the insertion should take place 
        for (int i = 1; i < text.length(); i++)  
        { 
            curr.next = add(text.charAt(i) - '0'); 
            curr = curr.next; 
        } 
        return head; 
    } 
  
}
