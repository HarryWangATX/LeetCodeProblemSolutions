/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
import java.math.*;

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        String n1 = "";
        String n2 = "";


        
        while(l1 != null){
            n1 += "" + l1.val;
            l1 = l1.next;
        }
        while(l2 != null){
            n2 += "" + l2.val;
            l2 = l2.next;
        }
        
        
        
        String sum = addNumber(reverse(n1), reverse(n2));
      
        ListNode a = null;
        return stringToNode(sum, a);
        
        
        
    }
    
    public static String reverse(String str){
        String reverse = "";
        
        
        for(int i = str.length() - 1; i >= 0; i--)
        {
            reverse = reverse + str.charAt(i);
        }
        
        return reverse;
    }
    
    
    public static ListNode add(int data) 
    { 
        ListNode newnode = new ListNode(data); 
        newnode.val = data;
        newnode.next = null; 
        return newnode; 
    } 

    // Function to convert the string 
    // to Linked List. 
    public static ListNode stringToNode(String text,  ListNode head) 
    { 
        head = add(text.charAt(0)-48); 
        ListNode curr = head; 

        // curr pointer points to the current node 
        // where the insertion should take place 
        for (int i = 1; i < text.length(); i++)  
        { 
            curr.next = add(text.charAt(i) - 48); 
            curr = curr.next; 
        } 
        return head; 
    } 
    
    public static String addNumber (String a, String b){
        String sum = "";
        String min = "";
        int forward = 0;
        String max = "";
        int result = 0;
        int first;
        int second;
        if(a.length()>b.length()){
            max = a;
            min = b;
            
        }
        else{
            max = b;
            min = a;
            
            
        }
        
        
        for(int i = 0; i<min.length(); i++){

            first = min.charAt(min.length()-1-i) - '0';
            second = max.charAt(max.length()-1-i) - '0';
            result = first + second + forward;

            if(result < 10){
                sum += "" + result;
                forward = 0;
            }
            else{
                sum += "" + (result-10);
                forward = 1;
            }
            
        }
        
        if(a.length()==b.length()){
            if(forward == 1){
                sum += "1";
            }
     
            return sum;
        }
        
        for(int z = max.length()-min.length()-1; z>=0; z--){
            
            result = (max.charAt(z)-'0') + forward;
            
            if(result < 10){
                sum += "" + result;
                forward = 0;
            }
            else{
                sum += "" + (result - 10);
                forward = 1;
            }
        }
        
        

        if(forward == 1){
            sum += "1";
        }
        
        

        return sum;
    }
  
}
