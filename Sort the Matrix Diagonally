class Solution {
    public int[][] diagonalSort(int[][] mat) {
        int[][] stor = new int[mat.length * mat[0].length][4];
        int[][] res = new int[mat.length][mat[0].length];
        int count = 0;
        for(int i = 0; i<mat.length; i++){
            for(int j = 0; j<mat[i].length; j++){
                stor[count++] = new int[] {i-j, i, j, mat[i][j]};
            }
        }
        
        Arrays.sort(stor, new Comparator<int[]>(){
           public int compare(int[] a, int[] b){
               if(a[0] != b[0]){
                   return -(a[0] - b[0]);
               }
               return a[2] - b[2];
           } 
        });
        //System.out.println(Arrays.deepToString(stor));
        count = 0;
        for(int i = 1; i<stor.length-1; i++){
            count++;
            if(stor[i][0] != stor[i+1][0]){
                //System.out.println(stor[3][3] + " " + stor[i][3] + " " + count);
                int[] p1 = sort(stor, i-count+1, i);
                //System.out.println(i-count+1 + " " + i);
                //System.out.println(Arrays.toString(p1));
                int count1 = i-count+1;
                for(int j = 0; j<p1.length; j++){
                    //System.out.println(j+count-1);
                    stor[count1++][3] = p1[j];
                }
                count=0;
            }
        }
        
        for(int i = 0; i<stor.length; i++){
            res[stor[i][1]][stor[i][2]] = stor[i][3];
        }
        return res;
    }
    public int[] sort(int[][] mat, int l, int r){
        int[] res = new int[r - l+1];
        int count = 0;
        for(int i = l; i<=r; i++){
            res[count++] = mat[i][3];
        }
        Arrays.sort(res);
        return res;
    }
}
