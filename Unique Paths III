class Solution {
    public int uniquePathsIII(int[][] grid) {
        int need = 0;
        int row = 0;
        int col = 0;
        for(int i = 0; i<grid.length; i++){
            for(int j = 0; j<grid[i].length; j++){
                if(grid[i][j]!=-1){
                    need++;
                }
                if(grid[i][j] == 1){
                    row = i;
                    col = j;
                }
            }
        }
        return backtrack(grid, row, col, 0, need-1);
    }
    public int backtrack(int[][] grid, int i, int j, int count, int need){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length){
            return 0;
        }
        if(grid[i][j] == 2){
            if(count == need){
                return 1;
            }
            return 0;
        }
        if(grid[i][j] == -1){
            return 0;
        }
        int res = 0;
        grid[i][j] = -1;
        res += backtrack(grid, i, j+1, count+1, need);
        res += backtrack(grid, i, j-1, count+1, need);
        res += backtrack(grid, i+1, j, count+1, need);
        res += backtrack(grid, i-1, j, count+1, need);
        grid[i][j] = 0;
        return res;
    }
}
