class Solution {
    public int longestSubarray(int[] nums) {
        int[] dp = new int[nums.length];
        int sum = 0;
        int total = 0;
        int maxCon = 0;
        int start = 0;
        boolean changed = false;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 1){
                sum++;
                total++;
                if(!changed) {
                    start = i;
                    changed = true;
                }
            }
            else if(nums[i] == 0 && sum > 0){
                maxCon = Math.max(maxCon, sum);
                //System.out.println(sum + " " + i + " " + start + " " + (i-1));
                dp[start] = sum;
                dp[i-1] = sum;
                //System.out.println(dp[start] + " " + dp[i-1]);
                changed = false;
                sum = 0;
            }
        }
        maxCon = Math.max(maxCon, sum);
        if(sum > 0){
            dp[start] = sum;
            dp[nums.length-1] = sum;
        }
        if(total == nums.length){
            return total-1;
        }
        else if(total == 0){
            return 0;
        }
        //System.out.println(Arrays.toString(dp));
        int maxLen = Integer.MIN_VALUE;
        boolean found = false;
        for(int i = 0; i<dp.length-2; i++){
            if(nums[i] == 1 && nums[i+1] == 0 && nums[i+2] == 1){
                found = true;
                maxLen = Math.max(maxLen, dp[i] + dp[i+2]);
            }
        }
        if(found && maxLen > maxCon){
            return maxLen;
        }
        //System.out.println(maxCon);
        return maxCon;
    }
}
