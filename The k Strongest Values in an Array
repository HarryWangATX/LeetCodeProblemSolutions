class Solution {
    public int[] getStrongest(int[] arr, int k) {
        if(arr.length == 1){
            return arr;
        }
        int[] clone = arr.clone();
        //Map<Integer, Integer> map = new HashMap<>();
        //int[][] list = new int[arr.length][2];
        Arrays.sort(clone);
        
        int median = clone[(arr.length-1)/2];
        /*
        for(int i = 0; i<arr.length; i++){
            for(int j = 0; j<arr.length; j++){
                if(Math.abs(arr[i]-median) > Math.abs(arr[j] - median)){
                    //map.put(arr[i], map.getOrDefault(arr[i], 0)+1);
                    list[i] = new int[] {arr[i], list[i][1]+1};
                    //System.out.println(arr[i]);
                }
                else if(Math.abs(arr[i]-median) == Math.abs(arr[j] - median)){
                    if(arr[i] > arr[j]){
                        //map.put(arr[i], map.getOrDefault(arr[i], 0)+1);
                        list[i] = new int[] {arr[i], list[i][1]+1};
                    }
                }
                else{
                    list[i] = new int[] {arr[i], list[i][1]};
                }
            }
        }
        
        Arrays.sort(list, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                //if(o1[1] == o2[1]){
                    //return o1[0] - o2[0];
                //}
                return o1[1] - o2[1];
            }
        });
        //System.out.println(Arrays.deepToString(list));
        */
        int[][] list = new int[arr.length][2];
        for(int i = 0; i<arr.length; i++){
            list[i] = new int[]{arr[i], Math.abs(arr[i]-median)};
        }
        Arrays.sort(list, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                if(o1[1] == o2[1]){
                    return o1[0] - o2[0];
                }
                return o1[1] - o2[1];
            }
        });
        //System.out.println(Arrays.deepToString(list));
        //System.out.println(arr);
        int[] res = new int[k];
        for(int i = 0; i<k; i++){
            res[i] = list[list.length-i-1][0];
        }
        return res;
    }
}
